<project name="nuxeoDriveDebianPackage"
         default="package"
         xmlns:nx="urn:nuxeo-build"
         xmlns:artifact="urn:nuxeo-artifact">
    <taskdef resource="org/nuxeo/build/antlib.xml" uri="urn:nuxeo-build" />
    <taskdef resource="org/nuxeo/build/artifact/antlib.xml"
           uri="urn:nuxeo-artifact" />
    <taskdef resource="net/sf/antcontrib/antlib.xml" />

    <property name="out.dir" value="${maven.project.build.directory}" />

    <!-- remote host settings -->
    <property name="apt.host" value="apt.nuxeo.org" />
    <property name="apt.user" value="nuxeo" />
    <property name="apt.pool" value="/var/www/apt.nuxeo.org/pool" />
    <property name="apt.keyfile" value="${user.home}/.ssh/id_rsa" />
    <property name="apt.passphrase" value="" />

    <!-- Get variables from environment if set, use defaults otherwise -->
    <target name="init-from-env">
        <property environment="env" />
        <!-- distribution settings -->
        <condition property="nuxeo.version" value="${env.nuxeo.version}"
                   else="${maven.project.version}">
            <isset property="env.nuxeo.version" />
        </condition>
        <!-- drive client settints -->
        <loadproperties srcFile="${maven.basedir}/nxdrive/__init__.py">
            <filterchain>
                <linecontains>
                    <contains value="__version__" />
                </linecontains>
            </filterchain>
        </loadproperties>
        <propertyregex property="client.defaultversion"
                       input="${__version__}"
                       regexp="'(.*)'"
                       select="\1" />
        <condition property="client.version" value="${env.client.version}"
                   else="${client.defaultversion}">
            <isset property="env.client.version" />
        </condition>
        <!-- partial package settings -->
        <propertyregex property="nuxeo.shortversion"
                       input="${nuxeo.version}"
                       regexp="([0-9\.]+)(-.*)?"
                       select="\1" />
        <condition property="package.name" value="${env.package.name}"
                   else="nuxeo-${nuxeo.shortversion}-drive-client">
            <isset property="env.package.name" />
        </condition>
        <condition property="package.revision" value="${env.package.revision}"
                   else="01">
            <isset property="env.package.revision" />
        </condition>
    </target>


    <!-- pick deb version and destination pool from drive client version -->
    <target name="init" depends="init-from-env">
        <!-- Build timestamp -->
        <tstamp>
            <format property="build.timestamp" pattern="yyyyMMdd" />
        </tstamp>
        <!-- Check whether we have a snapshot -->
        <if>
            <not>
                <isset property="package.type" />
            </not>
            <then>
                <propertyregex property="package.snapshot.version"
                               input="${client.version}"
                               regexp="([0-9\.]+)-(SNAPSHOT|dev)"
                               select="\1-00+${build.timestamp}+${package.revision}" />
                <if>
                    <isset property="package.snapshot.version" />
                    <then>
                        <property name="package.version" value="${package.snapshot.version}" />
                        <property name="package.type" value="snapshots" />
                    </then>
                </if>
            </then>
        </if>
        <!-- Check whether we have a date-based release -->
        <if>
            <not>
                <isset property="package.type" />
            </not>
            <then>
                <propertyregex property="package.datebased.version"
                               input="${client}"
                               regexp="([0-9\.]+)-I([0-9]{8})_(.*)"
                               select="\1-00+\2+\3+${package.revision}" />
                <if>
                    <isset property="package.datebased.version" />
                    <then>
                        <property name="package.version" value="${package.datebased.version}" />
                        <property name="package.type" value="datebased" />
                    </then>
                </if>
            </then>
        </if>
        <!-- Check whether we have a release candidate -->
        <if>
            <not>
                <isset property="package.type" />
            </not>
            <then>
                <propertyregex property="package.rc.version"
                               input="${client.version}"
                               regexp="([0-9\.]+)-(RC[0-9]+)"
                               select="\1-00+${build.timestamp}+\2+${package.revision}" />
                <if>
                    <isset property="package.rc.version" />
                    <then>
                        <property name="package.version" value="${package.rc.version}" />
                        <property name="package.type" value="datebased" />
                    </then>
                </if>
            </then>
        </if>
        <!-- Drive client release + fasttrack Nuxeo -->
        <if>
            <not>
                <isset property="package.type" />
            </not>
            <then>
                <!-- Check whether we have a fasttrack Nuxeo -->
                <propertyregex property="package.fasttrack.version"
                               input="${nuxeo.version}"
                               regexp="([0-9]{1}\.[0-9]{1}\.[0-9]{1})"
                               select="\1" />
                <if>
                    <isset property="package.fasttrack.version" />
                    <then>
                        <property name="package.version" value="${client.version}" />
                        <property name="package.type" value="fasttracks" />
                    </then>
                </if>
            </then>
        </if>
        <!-- None of the above? Drive client release + LTS Nuxeo -->
        <if>
            <not>
                <isset property="package.type" />
            </not>
            <then>
                <property name="package.version" value="${client.version}" />
                <property name="package.type" value="releases" />
            </then>
        </if>
        <!-- Versions in debian parlance -->
        <propertyregex property="debian.version"
                       input="${package.version}"
                       regexp="([0-9\.]+)(-.*)?"
                       select="\1" />
        <propertyregex property="debian.revision"
                       input="${package.version}"
                       regexp="([0-9\.]+)-(.*)"
                       select="\2"
                       defaultValue="${package.revision}" />
        <property name="package.fullversion" value="${debian.version}-${debian.revision}" />
        <!-- Lowercase name -->
        <script language="javascript"><![CDATA[
            var currentName = nuxeoDriveDebianPackage.getProperty("package.name");
            nuxeoDriveDebianPackage.setProperty("package.name", currentName.toLowerCase());
        ]]></script>
        <!-- Print results -->
        <echo message="*** Version settings ***" />
        <echo message="Nuxeo CAP version: ${nuxeo.version}" />
        <echo message="Nuxeo Drive client version: ${client.version}" />
        <echo message="Package name: ${package.name}" />
        <echo message="Package version: ${package.version}" />
        <echo message="Package type: ${package.type}" />
        <echo message="Debian version: ${debian.version}" />
        <echo message="Debian revision: ${debian.revision}" />
    </target>


    <!-- Prepare files for deb packaging -->
    <target name="setup" depends="init">

        <!-- Prepare structure for dpkg-buildpackage -->
        <echo message="*** Prepare structure for dpkg-buildpackage ***" />
        <filterset id="nxvars">
            <filter token="package.name" value="${package.name}" />
            <filter token="package.fullversion" value="${package.fullversion}" />
        </filterset>
        <copy todir="${out.dir}/${package.name}-${package.fullversion}/debian">
            <fileset dir="${maven.basedir}/resources/debian">
                <include name="**" />
            </fileset>
            <filterset refid="nxvars" />
        </copy>
        <move file="${out.dir}/${package.name}-${package.fullversion}/debian/nuxeo-drive.manpages"
              tofile="${out.dir}/${package.name}-${package.fullversion}/debian/${package.name}.manpages" />
        <move file="${out.dir}/${package.name}-${package.fullversion}/debian/nuxeo-drive.lintian-overrides"
              tofile="${out.dir}/${package.name}-${package.fullversion}/debian/${package.name}.lintian-overrides" />

        <!-- Add sources -->
        <copy file="${maven.basedir}/setup.cfg" tofile="${out.dir}/${package.name}-${package.fullversion}/setup.cfg" />
        <copy file="${maven.basedir}/setup.py" tofile="${out.dir}/${package.name}-${package.fullversion}/setup.py" />
        <chmod file="${out.dir}/${package.name}-${package.fullversion}/setup.py" perm="0755" />
        <copy file="${maven.basedir}/README.md" tofile="${out.dir}/${package.name}-${package.fullversion}/README.md" />
        <!--<copy todir="${out.dir}/${package.name}-${package.fullversion}">
            <fileset dir="${maven.basedir}">
                <include name="**" />
            </fileset>
        </copy>-->
        <symlink resource="${maven.basedir}" link="${out.dir}/${package.name}-${package.fullversion}" />
        <symlink resource="${maven.basedir}/launcher.pyw" link="${out.dir}/${package.name}-${package.fullversion}/launcher.pyw" />

    </target>


    <!-- Build the package -->
    <target name="binary-package" depends="setup">

        <echo message="*** Build binary package ***" />
        <exec dir="${out.dir}/${package.name}-${package.fullversion}"
              executable="dpkg-buildpackage"
              failonerror="true">
            <arg value="-rfakeroot" />
            <arg value="-A" />
            <arg value="-uc" />
            <env key="PATH" path="${maven.basedir}/bin:${env.PATH}" />
        </exec>

    </target>


    <!-- Move resulting packages -->
    <target name="move-packages" depends="binary-package">

        <echo message="*** Move files to packages directory ***" />
        <move file="${out.dir}/${package.name}_${package.fullversion}_all.deb" todir="${out.dir}/packages/${package.type}" />

    </target>


    <!-- Run lintian on the results -->
    <target name="lintian" depends="move-packages">

        <echo message="*** Running lintian on the binary package ***" />
        <exec dir="${out.dir}/packages/${package.type}"
              executable="lintian"
              failonerror="true">
            <arg value="-cEI" />
            <arg value="${package.name}_${package.fullversion}_all.deb" />
        </exec>

    </target>

    <!--Packaging target -->
    <target name="package" depends="lintian">
    </target>

    <!-- deployment target -->
    <!-- Note: For snapshots, this will fail if package happens before
               midnight but deploy happens after midnight.
               This is due to the build stamp being recalculated between executions.
    -->
    <target name="deploy" depends="init">

        <!-- use exec tasks for scp/ssh as the ant tasks tends to hang -->

        <echo message="*** Uploading binary package to apt pool ***" />
        <exec dir="${out.dir}/packages/${package.type}"
              executable="scp"
              failonerror="true">
            <arg value="${out.dir}/packages/${package.type}/${package.name}_${package.fullversion}_all.deb" />
            <arg value="${apt.user}@${apt.host}:${apt.pool}/${package.type}/" />
        </exec>

        <!-- update script in nuxeo-packaging-debian -->
        <echo message="*** Updating apt repository on apt host ***" />
        <exec executable="ssh"
              failonerror="true">
            <arg value="${apt.user}@${apt.host}" />
            <arg value="bin/update_debian_repository" />
        </exec>

    </target>

</project>
