#!groovy

// Pipeline properties
properties([
    [$class: 'SchedulerPreference', preferEvenload: true],
    [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
            [$class: 'StringParameterDefinition',
                name: 'SPECIFIC_TEST',
                defaultValue: '',
                description: 'Specific test to launch. The syntax must be the same as <a href="http://doc.pytest.org/en/latest/example/markers.html#selecting-tests-based-on-their-node-id">pytest markers</a>'],
            [$class: 'StringParameterDefinition',
                name: 'PYTHON_DRIVE_VERSION',
                defaultValue: '2.7.13',
                description: '<b>Required</b> Python version to use'],
            [$class: 'StringParameterDefinition',
                name: 'PYQT_VERSION',
                defaultValue: '4.12',
                description: '<b>Required</b> PyQt version to use (GNU/Linux and macOS only)'],
            [$class: 'StringParameterDefinition',
                name: 'CXFREEZE_VERSION',
                defaultValue: '4.3.3',
                description: '<i>Optional</i> cx_Freeze version to use'],
            [$class: 'StringParameterDefinition',
                name: 'SIP_VERSION',
                defaultValue: '4.19',
                description: '<i>Optional</i> SIP version to use (GNU/Linux and macOS only)'],,
            [$class: 'StringParameterDefinition',
                name: 'TEST_REMOTE_SCAN_VOLUME',
                defaultValue: '100',
                description: '<i>Optional</i> Number of nodes for the remote scan volume test'],
            [$class: 'ChoiceParameterDefinition',
                name: 'RANDOM_BUG_MODE',
                choices: 'RELAX\nSTRICT\nBYPASS',
                description: 'Random bug mode']
        ]
    ],
    pipelineTriggers([[$class: 'GitHubPushTrigger']]),
    disableConcurrentBuilds()
])

// Jenkins slaves we will build on
slaves = ['OSXSLAVE', 'SLAVE', 'WINSLAVE']
labels = [
    OSXSLAVE: 'macOS',
    SLAVE: 'GNU/Linux',
    WINSLAVE: 'Windows'
]
builders = [:]

// GitHub stuff
repos_url = 'https://github.com/nuxeo/nuxeo-drive'
repos_git = 'https://github.com/nuxeo/nuxeo-drive.git'
status_msg = [
    'FAILURE': 'Failed to build on Nuxeo CI',
    'PENDING': 'Building on on Nuxeo CI',
    'SUCCESS': 'Successfully built on Nuxeo CI'
]

def github_status(status) {
    step([$class: 'GitHubCommitStatusSetter',
        reposSource: [$class: 'ManuallyEnteredRepositorySource', url: repos_url],
        contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: 'ci/qa.nuxeo.com'],
        statusResultSource: [$class: 'ConditionalStatusResultSource',
            results: [[$class: 'AnyBuildResult',
                message: status_msg.get(status), state: status]]]])
}

for (def x in slaves) {
    // Need to bind the label variable before the closure - can't do 'for (slave in slaves)'
    def slave = x
    def osi = labels.get(slave)

    // Create a map to pass in to the 'parallel' step so we can fire all the builds at once
    builders[slave] = {
        node(slave) {
            withEnv(["WORKSPACE=${pwd()}"]) {
                github_status('PENDING')

                // Required envars
                env.PYTHON_DRIVE_VERSION = params.PYTHON_DRIVE_VERSION ?: '2.7.13'
                env.PYQT_VERSION = params.PYQT_VERSION ?: '4.12'

                try {
                    stage(osi + ' Checkout') {
                        checkout([$class: 'GitSCM',
                            branches: [[name: '*/' + env.BRANCH_NAME]],
                            browser: [$class: 'GithubWeb', repoUrl: repos_url],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'sources']],
                            submoduleCfg: [], userRemoteConfigs: [[url: repos_git]]])
                    }

                    stage(osi + ' Setup') {
                        // Set up a complete isolated environment
                        dir('sources') {
                            if (osi == 'macOS') {
                                sh 'tools/osx/deploy_jenkins_slave.sh'
                            } else if (osi == 'GNU/Linux') {
                                sh 'tools/linux/deploy_jenkins_slave.sh'
                            } else {
                                bat 'powershell ".\\tools\\windows\\deploy_jenkins_slave.ps1"'
                            }
                        }
                    }

                    stage(osi + ' Tests') {
                        // Launch the tests suite
                        def jdk = tool name: 'java-8-oracle'
                        env.JAVA_HOME = "${jdk}"
                        def mvnHome = tool name: 'maven-3.3', type: 'hudson.tasks.Maven$MavenInstallation'

                        // Number of nodes for the remote scan volume test
                        env.TEST_REMOTE_SCAN_VOLUME = params.TEST_REMOTE_SCAN_VOLUME ?: '100'

                        dir('sources') {
	                        // Set up the report name folder
	                        env.REPORT_PATH = env.WORKSPACE + '/sources'

                            if (osi == 'Windows') {
                                bat(/"${mvnHome}\bin\mvn" -f ftest\pom.xml clean verify -Pqa,pgsql/)
                            } else {
                                sh "${mvnHome}/bin/mvn -f ftest/pom.xml clean verify -Pqa,pgsql"
                            }
                        }

                        echo 'Retrieve coverage statistics'
                        archive 'coverage/*'

                        currentBuild.result = 'SUCCESS'
                    }
                } catch(e) {
                    currentBuild.result = 'FAILURE'
                    throw e
                } finally {
                    // We use catchError to not let notifiers and recorders change the current build status
                    catchError {
                        // Update GitHub status whatever the result
                        github_status(currentBuild.result)

                        archive 'sources/ftest/target/tomcat/log/*.log, sources/report_*.zip'

                        // Update revelant Jira issues only if we are working on the master branch
                        if (env.BRANCH_NAME == 'master') {
                            step([$class: 'JiraIssueUpdater',
                                issueSelector: [$class: 'DefaultIssueSelector'],
                                scm: scm])
                        }
                    }
                }
            }
        }
    }
}

timeout(180) {
    timestamps {
        parallel builders
    }
}
