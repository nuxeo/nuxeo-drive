#!groovy

// Pipeline properties
properties([
    disableConcurrentBuilds(),
    overrideIndexTriggers(true),
    pipelineTriggers([]),
    [$class: 'SchedulerPreference', preferEvenload: true],
    [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
            [$class: 'StringParameterDefinition',
                name: 'PYTHON_DRIVE_VERSION',
                defaultValue: '2.7.13',
                description: '<b>Required</b> Python version to use'],
            [$class: 'StringParameterDefinition',
                name: 'PYQT_VERSION',
                defaultValue: '4.12',
                description: '<b>Required</b> PyQt version to use (GNU/Linux and macOS only)'],
            [$class: 'StringParameterDefinition',
                name: 'CXFREEZE_VERSION',
                defaultValue: '4.3.3',
                description: '<i>Optional</i> cx_Freeze version to use'],
            [$class: 'StringParameterDefinition',
                name: 'SIP_VERSION',
                defaultValue: '4.19',
                description: '<i>Optional</i> SIP version to use (GNU/Linux and macOS only)'],,
            [$class: 'ChoiceParameterDefinition',
                name: 'RANDOM_BUG_MODE',
                choices: 'RELAX\nSTRICT\nBYPASS',
                description: 'Random bug mode']
        ]
    ]
])

// Jenkins slaves we will build on
def slaves = ['OSXSLAVE', 'SLAVE', 'WINSLAVE']
def labels = [
    OSXSLAVE: 'macOS',
    SLAVE: 'GNU/Linux',
    WINSLAVE: 'Windows'
]
def builders = [:]

for (x in slaves) {
    def slave = x
    def osi = labels.get(slave)

    builders[slave] = {
        node(slave) {
            withEnv(["WORKSPACE=${pwd()}"]) {
                stage(osi + ' Checkout') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/' + env.BRANCH_NAME]],
                        browser: [$class: 'GithubWeb', repoUrl: 'https://github.com/nuxeo/nuxeo-drive'],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'sources']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: 'https://github.com/nuxeo/nuxeo-drive.git']]])
                }

                stage(osi + ' Build') {
                    dir('sources') {
                        dir('build') {
                            deleteDir()
                        }
                        dir('dist') {
                            deleteDir()
                        }

                        if (osi == 'macOS') {
                            sh 'tools/osx/deploy_jenkins_slave.sh --build'
                            archive 'dist/*.dmg'
                        } else if (osi == 'GNU/Linux') {
                            sh 'tools/linux/deploy_jenkins_slave.sh --build'
                            archive 'dist/*.deb'
                        } else {
                            bat 'powershell ".\\tools\\windows\\deploy_jenkins_slave.ps1" -build'
                            archive 'dist/*.msi'
                        }
                        archive 'dist/*.json, dist/*.zip'
                    }
                }
            }
        }
    }
}

parallel builders
